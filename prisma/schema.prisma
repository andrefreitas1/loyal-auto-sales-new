generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model Vehicle {
  id            String       @id @default(uuid())
  brand         String
  model         String
  year          Int
  color         String
  vin           String       @unique
  mileage       Float
  purchasePrice Float
  purchaseDate  DateTime     @default(now())
  status        String       @default("acquired")
  description   String?      @db.Text
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  expenses      Expense[]
  images        Image[]
  marketPrices  MarketPrice?
  saleInfo      SaleInfo?
  customers     Customer[]
}

model Image {
  id        String   @id @default(uuid())
  url       String
  vehicleId String
  createdAt DateTime @default(now())
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])

  @@index([vehicleId])
}

model Expense {
  id          String   @id @default(uuid())
  type        String
  description String
  amount      Float
  date        DateTime @default(now())
  vehicleId   String
  createdAt   DateTime @default(now())
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])

  @@index([vehicleId])
}

model MarketPrice {
  id        String   @id @default(uuid())
  wholesale Float
  mmr       Float
  retail    Float
  repasse   Float
  vehicleId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
}

model SaleInfo {
  id        String   @id @default(uuid())
  salePrice Float
  saleDate  DateTime @default(now())
  vehicleId String   @unique
  createdAt DateTime @default(now())
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  role      String     @default("operator")
  active    Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  customers Customer[]
  statusHistoryUpdates CustomerStatusHistory[] @relation("StatusUpdater")
}

enum ResidenceType {
  RENTAL
  MORTGAGE
  OWNED
}

model Customer {
  id             String                 @id @default(uuid())
  firstName      String
  lastName       String
  birthDate      DateTime
  phone          String
  email          String?
  passportUrl    String
  address        String                 @default("")
  city           String                 @default("")
  state          String                 @default("")
  zipCode        String                 @default("")
  residenceType  String                 @default("RENTAL")
  residenceYears Int                    @default(0)
  residenceMonths Int                   @default(0)
  profession     String                 @default("")
  monthlyIncome  Float                  @default(0)
  jobYears       Int                    @default(0)
  jobMonths      Int                    @default(0)
  status         String                 @default("new")
  statusUpdatedAt DateTime?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  operatorId     String
  operator       User                   @relation(fields: [operatorId], references: [id])
  vehicleId      String
  vehicle        Vehicle                @relation(fields: [vehicleId], references: [id])
  statusHistory  CustomerStatusHistory[]

  @@index([operatorId])
  @@index([vehicleId])
}

model CustomerStatusHistory {
  id         String   @id @default(uuid())
  customerId String
  status     String
  updatedBy  String
  createdAt  DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id])
  updatedByUser User  @relation("StatusUpdater", fields: [updatedBy], references: [id])

  @@index([customerId])
  @@index([updatedBy])
}
