generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model Vehicle {
  id            String       @id @default(uuid())
  brand         String
  model         String
  year          Int
  color         String
  vin           String       @unique
  mileage       Float
  purchasePrice Float
  purchaseDate  DateTime     @default(now())
  status        String       @default("acquired")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  expenses      Expense[]
  images        Image[]
  marketPrices  MarketPrice?
  saleInfo      SaleInfo?
  customers     Customer[]
}

model Image {
  id        String   @id @default(uuid())
  url       String
  vehicleId String
  createdAt DateTime @default(now())
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])

  @@index([vehicleId])
}

model Expense {
  id          String   @id @default(uuid())
  type        String
  description String
  amount      Float
  date        DateTime @default(now())
  vehicleId   String
  createdAt   DateTime @default(now())
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])

  @@index([vehicleId])
}

model MarketPrice {
  id        String   @id @default(uuid())
  wholesale Float
  mmr       Float
  retail    Float
  repasse   Float
  vehicleId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
}

model SaleInfo {
  id        String   @id @default(uuid())
  salePrice Float
  saleDate  DateTime @default(now())
  vehicleId String   @unique
  createdAt DateTime @default(now())
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  role      String     @default("operator")
  active    Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  customers Customer[]
  statusHistoryUpdates CustomerStatusHistory[] @relation("StatusUpdater")
}

model Customer {
  id             String                 @id @default(uuid())
  firstName      String
  lastName       String
  birthDate      DateTime
  phone          String
  email          String?
  passportUrl    String
  address        String
  city           String
  state          String
  zipCode        String
  isRental       Boolean
  residenceYears Int
  residenceMonths Int
  profession     String
  monthlyIncome  Float
  jobYears       Int
  jobMonths      Int
  status         String                 @default("new")
  statusUpdatedAt DateTime?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  operatorId     String
  operator       User                   @relation(fields: [operatorId], references: [id])
  vehicleId      String
  vehicle        Vehicle                @relation(fields: [vehicleId], references: [id])
  statusHistory  CustomerStatusHistory[]

  @@index([operatorId])
  @@index([vehicleId])
}

model CustomerStatusHistory {
  id         String   @id @default(uuid())
  customerId String
  status     String
  updatedBy  String
  createdAt  DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id])
  updatedByUser User  @relation("StatusUpdater", fields: [updatedBy], references: [id])

  @@index([customerId])
  @@index([updatedBy])
}
